{"createdAt":"2025-09-29T14:51:12.687Z","updatedAt":"2025-09-30T17:00:13.000Z","id":"DI07ZM2DXs0iFSRk","name":"TL_SEARCH_CANDIDATES","active":false,"isArchived":false,"nodes":[{"parameters":{"inputSource":"passthrough"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-400,-304],"id":"b7bee598-de3e-48cc-892e-8845f363ed03","name":"TRIGGER - When Executed by AnotherWorkflow"},{"parameters":{"content":"# ENTRADA\n## When Executed by Another Workflow\n* Objetivo: Permitir que el subflujo `TL_SEARCH_CANDIDATES` se ejecute únicamente cuando sea invocado desde el orquestador `TL_TEAMS_ASSISTANT_AGENT`.\n* Input Data Schema:\n  - user_id (string)\n  - user_name (string)\n  - conversation_id (string)\n  - service_url (string)\n  - tenant_id (string)\n  - locale (string)\n  - action (string)\n* Validaciones:\n  - Confirmar que `action` sea uno de:\n    - \"buscar_candidatos\" (iniciar flujo y enviar tarjeta)\n    - \"buscar_candidatos_submit\" (respuesta del usuario desde Adaptive Card)\n  - Verificar `conversation_id` y `service_url` para poder responder a Teams.\n* Output:\n  - Propaga el JSON completo recibido desde el orquestador para los siguientes nodos del flujo.","height":768,"width":512,"color":5},"type":"n8n-nodes-base.stickyNote","position":[-576,-896],"typeVersion":1,"id":"e9f3195f-365c-4220-a5f5-fb7bba13f095","name":"Sticky Note"},{"parameters":{"method":"POST","url":"={{ $('TRIGGER - When Executed by AnotherWorkflow').item.json.service_url }}v3/conversations/{{ $('TRIGGER - When Executed by AnotherWorkflow').item.json.conversation_id }}/activities","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $json.access_token }}"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"type\": \"message\",\n  \"attachments\": [\n    {\n      \"contentType\": \"application/vnd.microsoft.card.adaptive\",\n      \"content\": {\n        \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n        \"type\": \"AdaptiveCard\",\n        \"version\": \"1.4\",\n        \"body\": [\n          {\n            \"type\": \"TextBlock\",\n            \"text\": \"Reemplaza la informacion entre ** ** segun su solicitud:\"\n          },\n          {\n            \"type\": \"Input.Text\",\n            \"id\": \"searchMessage\",\n            \"isMultiline\": true,\n            \"value\": \"Estoy buscando candidatos para **Web Developer** que estén localizados en **Colombia**, y que cuenten con conocimientos técnicos en **Java, Spring Boot, Web y Python**.\"\n          }\n        ],\n        \"actions\": [\n          {\n            \"type\": \"Action.Submit\",\n            \"title\": \"Enviar Solicitud\",\n\"data\": {\n              \"workflow\": \"TL_SEARCH_CANDIDATES\",\n              \"action\": \"buscar_candidatos_submit\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[848,-480],"id":"1441b974-86b9-4921-a013-ffa534837402","name":"Send Base Message to Teams"},{"parameters":{"method":"POST","url":"https://login.microsoftonline.com/f5b4bce5-06f0-4035-861f-ddea6d55a5e9/oauth2/v2.0/token","sendBody":true,"contentType":"form-urlencoded","bodyParameters":{"parameters":[{"name":"grant_type","value":"client_credentials"},{"name":"client_id","value":"={{$env.BOT_APP_ID}}"},{"name":"client_secret","value":"={{$env.BOT_APP_PASSWORD}}"},{"name":"scope","value":"https://api.botframework.com/.default"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[448,-320],"id":"5c486c9b-8230-4ab0-ab8c-4f63d4e8d75d","name":"Get Bot Token Menu"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[624,-480],"id":"40cb60cc-f53f-42a0-b46b-e81d82e32c30","name":"Merge by Index Message User"},{"parameters":{"content":"# PROCESAMIENTO\n## Build & Send Base Message\n* Objetivo: Enviar al usuario una Adaptive Card con un campo de texto editable (Input.Text) que contiene el “Mensaje Base”.\n* Contenido del mensaje inicial:\n  \"Estoy buscando candidatos para **Web Developer** que estén localizados en **Colombia**, y que cuenten con conocimientos técnicos en **Java, Spring Boot, Web y Python**.\"\n* Instrucciones al usuario:\n  - Reemplazar únicamente los campos en **negrilla**.\n  - Pulsar “Enviar Solicitud” para enviar el contenido final al bot.\n* Observaciones técnicas:\n  - La acción de la tarjeta es `Action.Submit` con `data.workflow=\"TL_SEARCH_CANDIDATES\"` y `data.action=\"buscar_candidatos_submit\"`.\n  - El campo de entrada se llama `searchMessage`.\n* Output:\n  - Tarjeta enviada a Teams y espera de la respuesta del usuario vía webhook del orquestador.\n","height":784,"width":720,"color":4},"type":"n8n-nodes-base.stickyNote","position":[384,-912],"typeVersion":1,"id":"dfc18a69-eefe-4021-b757-881852682a87","name":"Sticky Note1"},{"parameters":{"content":"# ROUTING\n## Route Local Action\n* Objetivo: Desviar el flujo según la acción recibida en el subworkflow `TL_SEARCH_CANDIDATES`.\n* Condición:\n  - Si `action == \"buscar_candidatos\"` → Rama TRUE → se envía la tarjeta con el mensaje base.\n  - Si `action != \"buscar_candidatos\"` (ej: `\"buscar_candidatos_submit\"`) → Rama FALSE → se procesa el texto editado por el usuario.\n* Observación:\n  - En la interfaz de n8n puede mostrarse `{}` en la rama que no corresponde, pero no significa que se propaguen datos reales. \n  - En ejecución solo se envían items a la rama que cumpla la condición.\n* Output:\n  - Rama TRUE: inicia interacción con el usuario.\n  - Rama FALSE: envía la respuesta a los nodos de normalización.\n","height":736,"width":416,"color":5},"type":"n8n-nodes-base.stickyNote","position":[-48,-864],"typeVersion":1,"id":"ebe77c44-afe4-4604-a6fe-8c5a6da31e50","name":"Sticky Note2"},{"parameters":{"jsCode":"// -------------------------------------------------------- \n// Normalize Search Message -> Funcionalidad:\n// Este nodo unifica la información recibida desde Teams (AdaptiveCard)\n// con metadatos globales de la conversación y normaliza el texto enviado \n// por el usuario para extraer rol, ubicación y tecnologías.\n// --------------------------------------------------------\n\n// --------------------------------------------------------\n// Objetivo:\n// 1. Generar metadatos estándar (request_id, timestamp, source).\n// 2. Detectar mensaje enviado por el usuario desde la AdaptiveCard.\n// 3. Limpiar el texto (quitar markdown).\n// 4. Extraer rol, ubicación y skills mediante regex o fallback.\n// 5. Retornar un objeto JSON en snake_case con todos los datos listos\n//    para la búsqueda de candidatos.\n// --------------------------------------------------------\n\n\n// --------------------------------------------------------\n// Función para generar un request_id único (sin paquete externo)\n// --------------------------------------------------------\nfunction generateRequestId() {\n  return (\n    'req_' + Date.now().toString(36) + '_' + Math.random().toString(36).substring(2, 10)\n  );\n}\n\n// --------------------------------------------------------\n// Obtener input desde el nodo anterior\n// --------------------------------------------------------\nconst input = items[0].json;\nconst data = Array.isArray(input) ? input[0] : input;\n\n// --------------------------------------------------------\n// Inicializar campos básicos\n// --------------------------------------------------------\nlet raw = '';\nlet senderId = null;\nlet userId = null;\nlet userName = null;\nlet context = null;\nlet source = 'unknown';\n\n// Timestamp ISO\nconst timestamp = new Date().toISOString();\n\n// --------------------------------------------------------\n// Detectar origen de datos\n// --------------------------------------------------------\nif (data.fields && data.fields.searchMessage) {\n  // Caso Teams -> AdaptiveCard con Input.Text\n  raw = data.fields.searchMessage;\n  senderId = data.user_id || null;\n  userId = data.user_id || null;\n  userName = data.user_name || null;\n  context = data.action || null;\n  source = 'teams';\n} else if (data.chatInput) {\n  // Caso input manual desde chat n8n_dev (testing)\n  raw = data.chatInput;\n  senderId = data.sessionId || null;\n  userId = data.sessionId || null;\n  userName = 'n8n_dev_user';\n  context = data.action || null;\n  source = 'n8n_dev';\n} else {\n  // Fallback genérico\n  raw = data.text || '';\n  userId = data.user_id || null;\n  userName = data.user_name || null;\n  context = data.action || null;\n  source = 'unknown';\n}\n\n// --------------------------------------------------------\n// Limpiar texto (quitar negrillas de markdown **)\n// --------------------------------------------------------\nconst text = raw.replace(/\\*{2}/g, '').trim();\n\n// --------------------------------------------------------\n// Extracción de rol, ubicación y skills con regex\n// --------------------------------------------------------\nconst re =\n  /buscando\\s+candidatos?\\s+para\\s+(.+?)\\s+que\\s+est(é|e)n\\s+(?:ubicados?|localizados?)\\s+en\\s+(.+?),(?:\\s+y\\s+)?(?:que\\s+cuenten\\s+con\\s+conocimientos\\s+técnicos|con\\s+experiencia)\\s+en\\s+(.+?)(?:\\.|$)/i;\n\nlet role = '';\nlet location = '';\nlet skills = [];\n\nconst m = text.match(re);\nif (m) {\n  role = m[1].trim();\n  location = m[2].trim();\n  skills = m[3]\n    .split(',')\n    .map((s) => s.trim())\n    .filter(Boolean);\n} else {\n  // Fallback simple si el patrón no calza exacto\n  const afterPara = text.split(/para/i)[1] || '';\n  role = afterPara.split(/que\\s+est[ée]n|en\\s/i)[0]?.trim() || '';\n\n  const locMatch = text.match(/en\\s+([A-Za-zÁÉÍÓÚÜÑáéíóúüñ\\s]+?)(?:,|\\sy\\s|\\.|$)/i);\n  location = locMatch?.[1]?.trim() || '';\n\n  const techMatch = text.match(/en\\s+([A-Za-z0-9\\.\\-\\s,\\/\\+]+)(?:\\.|$)/i);\n  if (techMatch) {\n    skills = techMatch[1]\n      .split(',')\n      .map((s) => s.trim())\n      .filter(Boolean);\n  }\n}\n\n// --------------------------------------------------------\n// Construir metadatos globales\n// --------------------------------------------------------\nconst meta = {\n  request_id: generateRequestId(),\n  date: timestamp.split('T')[0], // AAAA-MM-DD\n  timestamp,\n  source,\n};\n\n// --------------------------------------------------------\n// Retornar estructura unificada en snake_case\n// --------------------------------------------------------\nreturn [\n  {\n    json: {\n      raw,\n      text,\n      role,\n      location,\n      skills,\n      sender_id: senderId,\n      user_id: userId,\n      user_name: userName,\n      context,\n      timestamp,\n      meta,\n      // Metadatos de Teams si aplica\n      conversation_id: data.conversation_id || null,\n      service_url: data.service_url || null,\n      tenant_id: data.tenant_id || null,\n      locale: data.locale || null,\n      action: data.action || null,\n    },\n  },\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[768,448],"id":"b280fa9d-0c54-47b2-a30c-6724824f77d8","name":"Normalize Search Message"},{"parameters":{"content":"# NORMALIZACIÓN\n## Normalize Search Message\n* Objetivo:\n  - Unificar la información recibida desde Teams (AdaptiveCard con Input.Text) o chat de desarrollo.\n  - Generar metadatos globales estándar (request_id, timestamp, source).\n  - Limpiar el texto enviado por el usuario (eliminar negrillas markdown).\n  - Extraer criterios de búsqueda estructurados: rol, ubicación y tecnologías (skills).\n\n* Funcionalidad:\n  - Genera un `request_id` único y marca temporal ISO (`timestamp`).\n  - Detecta origen de datos:\n    - Teams (AdaptiveCard con `fields.searchMessage`).\n    - Chat n8n_dev (`chatInput`).\n    - Fallback (campo `text`).\n  - Usa regex para identificar el rol, ubicación y skills.\n  - Incluye un fallback heurístico si el patrón no coincide.\n  - Retorna la información en snake_case.","height":704,"width":528},"type":"n8n-nodes-base.stickyNote","position":[576,-96],"typeVersion":1,"id":"57275ca0-0f5a-499a-8a7d-46537e7ba19c","name":"Sticky Note3"},{"parameters":{"assignments":{"assignments":[{"id":"3499ae5b-be17-4987-8aba-52869b36c9d2","name":"message","value":"={{ $json.text }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1312,448],"id":"4e97946c-eda2-4b4c-a56a-d06461d2dba4","name":"MAP_Request_Text"},{"parameters":{"promptType":"define","text":"=Mensaje del usuario:\n{{ $('MAP_Request_Text').first().json.message || 'No user instruction provided.' }}\n\n### 🎯 Tarea\nDevuelve un **único JSON válido** que cumpla con el siguiente esquema:\n\n{\n  \"titulo_1\": \"string\",\n  \"titulo_2\": \"string\",\n  \"titulo_3\": \"string\",\n  \"herramientas\": [\n    { \"nombre\": \"string\", \"peso\": 1.0 },\n    { \"nombre\": \"string\", \"peso\": 0.9 },\n    { \"nombre\": \"string\", \"peso\": 0.8 }\n  ],\n  \"pais\": \"Colombia\" | \"España\" | \"USA\"\n}\n\n### ⚠️ Reglas estrictas\n- Devuelve **solo** un objeto JSON, sin texto adicional, sin explicaciones y sin bloques de markdown.\n- `titulo_1`, `titulo_2`, `titulo_3` deben existir en la tabla `roles_calculator` y ser roles usados en LinkedIn (no repeticiones).\n- `herramientas` deben existir en la tabla `tecnologias`. Usa exactamente 3 herramientas con los pesos: 1.0, 0.9, 0.8.\n- `pais` = \"Colombia\" si se menciona, \"España\" si se menciona, \"USA\" si no se menciona otro país.\n\n### Ejemplo de salida esperado\n{\n  \"titulo_1\": \"Web Developer\",\n  \"titulo_2\": \"Full Stack Developer\",\n  \"titulo_3\": \"Backend Developer\",\n  \"herramientas\": [\n    { \"nombre\": \"Java\", \"peso\": 1.0 },\n    { \"nombre\": \"Spring Boot\", \"peso\": 0.9 },\n    { \"nombre\": \"Python\", \"peso\": 0.8 }\n  ],\n  \"pais\": \"Colombia\"\n}\n","hasOutputParser":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[1840,448],"id":"c87f722e-467b-47d8-a2fc-c657e78ee360","name":"AG_Request_interpretation"},{"parameters":{"content":"# PROCESAMIENTO\n## Request Interpretation (LLM + Parser)\n* Objetivo: Interpretar el mensaje del usuario y devolver un JSON normalizado con títulos, herramientas y país.\n* Entradas:\n  - message (texto del usuario) desde `MAP_Request_Text`.\n* Componentes:\n  - Chat Model: `LLM_Azure_gpt4o` (Azure OpenAI gpt-4o-mini, temp≈0.2).\n  - Output Parser: `PAR_Structured_output` (schema rígido).\n* Reglas:\n  - Títulos: usar `roles_calculator` (sin repeticiones).\n  - Herramientas: usar `tecnologias` (exactamente 3 con pesos 1.0, 0.9, 0.8).\n  - País: Colombia/España/USA según mensaje.\n  - Sin texto extra ni markdown: **solo JSON**.\n* Output (forma estándar):\n  ```json\n  {\n    \"output\": {\n      \"titulo_1\": \"Web Developer\",\n      \"titulo_2\": \"Java Developer\",\n      \"titulo_3\": \"Software Engineer\",\n      \"herramientas\": [\n        { \"nombre\": \"Java\", \"peso\": 1.0 },\n        { \"nombre\": \"Spring Boot\", \"peso\": 0.9 },\n        { \"nombre\": \"Python\", \"peso\": 0.8 }\n      ],\n      \"pais\": \"Colombia\"\n    }\n  }\n\n","height":1024,"width":640,"color":4},"type":"n8n-nodes-base.stickyNote","position":[1632,-240],"typeVersion":1,"id":"9fe08955-4396-489c-95cb-c92ce1282e1b","name":"Sticky Note4"},{"parameters":{"content":"# NORMALIZACIÓN\n## MAP_Request_Text\n* Objetivo: Mapear el campo `text` normalizado al campo `message`, requerido por el agente LLM.\n* Entradas:\n  - text (string) desde `Normalize Search Message`.\n* Procesamiento:\n  - Crea un campo `message` = `text`.\n* Output:\n  - JSON con campo `message` disponible para el prompt del agente.\n","height":496,"width":464,"color":2},"type":"n8n-nodes-base.stickyNote","position":[1136,112],"typeVersion":1,"id":"28dac5e8-0494-41a5-b2e7-5d250d1069da","name":"Sticky Note5"},{"parameters":{"promptType":"define","text":"=### Datos de entrada\n- Fecha: {{ $('Normalize Search Message').item.json.meta.date }}\n- País: {{ $json.output.pais }}\n- Títulos: {{ $json.output.titulo_1 }}, {{ $json.output.titulo_2 }}, {{ $json.output.titulo_3 }}\n- Herramientas: {{ $json.output.herramientas.toJsonString() }}\n\n### 🎯 Tarea\nDevuelve **únicamente un array JSON válido** con un único objeto que tenga la forma:\n\n[\n  {\n    \"output\": {\n      \"searchTerm\": [\n        \"string con query para TITULO_1\",\n        \"string con query para TITULO_2\",\n        \"string con query para TITULO_3\"\n      ],\n      \"tituloArchivo\": \"busqueda_linkedin_TITULO_1_TITULO_2_TITULO_3_PAIS_FECHA\",\n      \"location\": \"Colombia | España | USA\"\n    }\n  }\n]\n\n### 📌 Reglas estrictas\n- Incluye exactamente 3 elementos en `searchTerm`.\n- Usa los 3 títulos diferentes (`titulo_1`, `titulo_2`, `titulo_3`).\n- Incluye exactamente 3 herramientas por query, variando el orden.\n- Usa `location` solo con los valores permitidos.\n- No devuelvas texto adicional ni bloques Markdown, solo JSON válido.\n","hasOutputParser":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[2496,448],"id":"daeec5c8-dfea-4356-8a42-f3e9a227d35b","name":"AG_Request_Interpretation_2"},{"parameters":{"model":"gpt-4o-mini","options":{"maxTokens":80,"temperature":0.2}},"type":"@n8n/n8n-nodes-langchain.lmChatAzureOpenAi","typeVersion":1,"position":[1728,624],"id":"2a2fe273-fa38-44d0-9e72-a979ede10797","name":"LLM_Azure_gpt4o1","credentials":{"azureOpenAiApi":{"id":"YtlsVzbSfDwemUrR","name":"Azure Open AI account"}}},{"parameters":{"model":"gpt-4o-mini","options":{"maxTokens":80,"temperature":0.2}},"type":"@n8n/n8n-nodes-langchain.lmChatAzureOpenAi","typeVersion":1,"position":[2416,640],"id":"f9e51b88-0014-460b-a722-5fbfb93c6a4f","name":"LLM_Azure_gpt4o","credentials":{"azureOpenAiApi":{"id":"YtlsVzbSfDwemUrR","name":"Azure Open AI account"}}},{"parameters":{"content":"# PROCESAMIENTO\n## Request Interpretation (X-Ray Query Generation + Structure)\n* Objetivo: Generar queries X-Ray de LinkedIn a partir del JSON estructurado (títulos, herramientas, país).\n* Entradas:\n  - JSON de `AG_Request_interpretation.output` + `meta.date` de `Normalize Search Message`.\n* Reglas:\n  - 3 queries (una por cada título).  \n  - En cada query: exactamente 3 herramientas (variar orden/combos).  \n  - País en forma completa y abreviada (“Colombia” y “col”). En la 3ª, si país=Colombia, añadir ciudad (“Bogotá”/“Medellín”).\n  - Sin texto extra ni markdown: **solo JSON**.\n* Output (forma final usada aguas abajo):\n  ```json\n  {\n    \"output\": [\n      {\n        \"output\": {\n          \"searchTerm\": [\n            \"Web Developer Java Spring Boot\",\n            \"Java Developer Spring Boot Python\",\n            \"Software Engineer Python Java\"\n          ],\n          \"tituloArchivo\": \"busqueda_linkedin_Web_Developer_Java_Developer_Software_Engineer_Colombia_YYYY-MM-DD\",\n          \"location\": \"Colombia\"\n        }\n      }\n    ]\n  }\n\n","height":1024,"width":704,"color":4},"type":"n8n-nodes-base.stickyNote","position":[2304,-240],"typeVersion":1,"id":"2ec0f7b1-c6b1-424a-916a-f43972179d8a","name":"Sticky Note6"},{"parameters":{"schemaType":"manual","inputSchema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"titulo_1\": { \"type\": \"string\" },\n    \"titulo_2\": { \"type\": \"string\" },\n    \"titulo_3\": { \"type\": \"string\" },\n    \"herramientas\": {\n      \"type\": \"array\",\n      \"minItems\": 3,\n      \"maxItems\": 3,\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"nombre\": { \"type\": \"string\" },\n          \"peso\": { \"type\": \"number\" }\n        },\n        \"required\": [\"nombre\", \"peso\"],\n        \"additionalProperties\": false\n      }\n    },\n    \"pais\": { \"type\": \"string\", \"enum\": [\"Colombia\", \"España\", \"USA\"] }\n  },\n  \"required\": [\"titulo_1\", \"titulo_2\", \"titulo_3\", \"herramientas\", \"pais\"],\n  \"additionalProperties\": false\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[2096,624],"id":"acbf3cc5-b58b-49b9-8ebb-b874bc23cc7f","name":"PAR_Structured_output"},{"parameters":{"schemaType":"manual","inputSchema":"{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"output\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"searchTerm\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" },\n            \"minItems\": 3,\n            \"maxItems\": 3\n          },\n          \"tituloArchivo\": { \"type\": \"string\" },\n          \"location\": { \"type\": \"string\", \"enum\": [\"Colombia\", \"España\", \"USA\"] }\n        },\n        \"required\": [\"searchTerm\", \"tituloArchivo\", \"location\"],\n        \"additionalProperties\": false\n      }\n    },\n    \"required\": [\"output\"],\n    \"additionalProperties\": false\n  }\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[2720,640],"id":"7d889bb8-d3fb-4773-85a3-5e50c682ede9","name":"Structured Output Parser"},{"parameters":{"content":"# GESTIÓN DE ARCHIVO – CREACIÓN DE COPIA EN ONEDRIVE\n## Get_Template_File\n* Objetivo: Buscar la plantilla base `Plantilla_Busqueda_Perfiles.xlsx`.\n* Entradas: Credencial Microsoft (OneDrive/Graph) con permisos `Files.ReadWrite.All` y `Sites.Read.All`.\n* Proceso:\n  - Buscar por nombre en OneDrive del usuario (`Drive: Me`, `Search: Plantilla_Busqueda_Perfiles.xlsx`).\n  - (Opcional) Filtrar por coincidencia exacta con un Function.\n* Output:\n  - Metadatos del archivo: `id`, `name`, `webUrl`, `parentReference`, `size`, `lastModifiedDateTime`.\n* Riesgos:\n  - Puede haber varias coincidencias → filtrar por `name` exacto para evitar errores en pasos siguientes.\n","height":768,"width":848},"type":"n8n-nodes-base.stickyNote","position":[3024,64],"typeVersion":1,"id":"8ee5bd5d-ca7a-4368-8385-0db492345be4","name":"Sticky Note7"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8a94f5de-2797-4223-bf05-641a778479c1","leftValue":"={{ $json.action }}","rightValue":" buscar_candidatos","operator":{"type":"string","operation":"equals"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"33bcc9e9-e0c8-4dd5-8c5c-6c703ef19a36","leftValue":"={{ $json.action }}","rightValue":"buscar_candidatos_submit","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.3,"position":[96,-304],"id":"15c019c4-174c-4b78-8f15-ed1e0b8a86ad","name":"Route Local Action","alwaysOutputData":true},{"parameters":{"operation":"search","query":"Plantilla_Buscador_Perfiles.xlsx"},"type":"n8n-nodes-base.microsoftOneDrive","typeVersion":1,"position":[3264,448],"id":"96a0b3a1-be7e-4747-87c9-53b52c395944","name":"Search Template File.","credentials":{"microsoftOneDriveOAuth2Api":{"id":"3HKll8WeQYNAVdVY","name":"Microsoft Drive account"}}},{"parameters":{"resource":"folder","operation":"search","query":"ChatBot_n8n_Demo"},"type":"n8n-nodes-base.microsoftOneDrive","typeVersion":1,"position":[3488,448],"id":"1b2a3bdf-d3d3-43db-bd87-43a621dadde3","name":"Search a folder","executeOnce":true,"alwaysOutputData":false,"credentials":{"microsoftOneDriveOAuth2Api":{"id":"3HKll8WeQYNAVdVY","name":"Microsoft Drive account"}}},{"parameters":{"operation":"copy","fileId":"={{ $('Search Template File.').item.json.id }}","additionalFields":{"name":"={{ $('AG_Request_Interpretation_2').item.json.output[0].output.tituloArchivo }}.xlsx"},"parentReference":{"id":"={{ $json.id }}"}},"type":"n8n-nodes-base.microsoftOneDrive","typeVersion":1,"position":[3264,672],"id":"37334c98-e802-4105-af3d-53e5a5a4c118","name":"Copy Template To Folder","alwaysOutputData":false,"credentials":{"microsoftOneDriveOAuth2Api":{"id":"3HKll8WeQYNAVdVY","name":"Microsoft Drive account"}}},{"parameters":{"operation":"search","query":"={{ $('AG_Request_Interpretation_2').item.json.output[0].output.tituloArchivo }}.xlsx"},"type":"n8n-nodes-base.microsoftOneDrive","typeVersion":1,"position":[3488,672],"id":"07a99ba0-cb13-419e-af9f-583f56a90f55","name":"List Destination Children","credentials":{"microsoftOneDriveOAuth2Api":{"id":"3HKll8WeQYNAVdVY","name":"Microsoft Drive account"}}}],"connections":{"TRIGGER - When Executed by AnotherWorkflow":{"main":[[{"node":"Route Local Action","type":"main","index":0}]]},"Get Bot Token Menu":{"main":[[{"node":"Merge by Index Message User","type":"main","index":1}]]},"Merge by Index Message User":{"main":[[{"node":"Send Base Message to Teams","type":"main","index":0}]]},"Normalize Search Message":{"main":[[{"node":"MAP_Request_Text","type":"main","index":0}]]},"MAP_Request_Text":{"main":[[{"node":"AG_Request_interpretation","type":"main","index":0}]]},"AG_Request_interpretation":{"main":[[{"node":"AG_Request_Interpretation_2","type":"main","index":0}]]},"LLM_Azure_gpt4o1":{"ai_languageModel":[[{"node":"AG_Request_interpretation","type":"ai_languageModel","index":0}]]},"LLM_Azure_gpt4o":{"ai_languageModel":[[{"node":"AG_Request_Interpretation_2","type":"ai_languageModel","index":0}]]},"PAR_Structured_output":{"ai_outputParser":[[{"node":"AG_Request_interpretation","type":"ai_outputParser","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"AG_Request_Interpretation_2","type":"ai_outputParser","index":0}]]},"Route Local Action":{"main":[[{"node":"Get Bot Token Menu","type":"main","index":0},{"node":"Merge by Index Message User","type":"main","index":0}],[{"node":"Normalize Search Message","type":"main","index":0}]]},"AG_Request_Interpretation_2":{"main":[[{"node":"Search Template File.","type":"main","index":0}]]},"Search Template File.":{"main":[[{"node":"Search a folder","type":"main","index":0}]]},"Search a folder":{"main":[[{"node":"Copy Template To Folder","type":"main","index":0}]]},"Copy Template To Folder":{"main":[[{"node":"List Destination Children","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"TRIGGER - When Executed by AnotherWorkflow":[{"json":{"user_id":"29:1mCCp9P582J6HcMOTRF1S5iVdshggiu454DQm95Hi1P0w74SORwI0bGv8siIaSdaA1eumw1XKNfzE1g6G2dYeMQ","user_name":"Brian Fair Suarez Porras","user_aad_id":"28a43fba-2001-4737-986f-80bb79ca3aa6","message_id":"f:ba283234-617e-d454-3927-c813f5f3c201","message_timestamp":"2025-09-30T16:24:47.736Z","conversation_id":"a:1mKDqkbBKJ88qzL3cmala0Rkccv5olC-iFy_6K3dKrUqCyTDjpWXBw423uyK_glsEUQH0xOqxcB12pVozhc2rXyClYrfVlLiDR23JWCg3RYoD5T0IyxClSoOIJw9k28wE","conversation_type":"personal","tenant_id":"f5b4bce5-06f0-4035-861f-ddea6d55a5e9","locale":"es-MX","timezone":"America/Bogota","service_url":"https://smba.trafficmanager.net/amer/f5b4bce5-06f0-4035-861f-ddea6d55a5e9/","action":"buscar_candidatos_submit","fields":{"workflow":"TL_SEARCH_CANDIDATES","searchMessage":"Estoy buscando candidatos para **Web Developer** que estén localizados en **Colombia**, y que cuenten con conocimientos técnicos en **Java, Spring Boot, Web y Python**."}}}],"AG_Request_Interpretation_2":[{"json":{"output":[{"output":{"searchTerm":["Web Developer Java Spring Boot","Java Developer Spring Boot Python","Software Engineer Python Java"],"tituloArchivo":"busqueda_linkedin_Web_Developer_Java_Developer_Software_Engineer_Colombia_2025-09-30","location":"Colombia"}}]}}]},"versionId":"bfbb7401-beaa-4b08-a957-3786490df24a","triggerCount":0,"shared":[{"createdAt":"2025-09-29T14:51:12.695Z","updatedAt":"2025-09-29T14:51:12.695Z","role":"workflow:owner","workflowId":"DI07ZM2DXs0iFSRk","projectId":"NYzuSfuD1ceiPl6G"}],"tags":[]}